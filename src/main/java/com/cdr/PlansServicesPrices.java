/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.cdr;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class PlansServicesPrices extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7715890250711654160L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PlansServicesPrices\",\"namespace\":\"com.cdr\",\"fields\":[{\"name\":\"planID\",\"type\":\"int\"},{\"name\":\"serviceName\",\"type\":\"string\"},{\"name\":\"billingConditionID\",\"type\":\"int\"},{\"name\":\"price\",\"type\":{\"type\":\"bytes\",\"scale\":2,\"precision\":6,\"logicalType\":\"decimal\"}},{\"name\":\"quantityTypeID\",\"type\":\"int\"},{\"name\":\"lastUpdate\",\"type\":{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<PlansServicesPrices> ENCODER =
      new BinaryMessageEncoder<PlansServicesPrices>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PlansServicesPrices> DECODER =
      new BinaryMessageDecoder<PlansServicesPrices>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PlansServicesPrices> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PlansServicesPrices> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PlansServicesPrices> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PlansServicesPrices>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PlansServicesPrices to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PlansServicesPrices from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PlansServicesPrices instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PlansServicesPrices fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private int planID;
  private java.lang.CharSequence serviceName;
  private int billingConditionID;
  private java.nio.ByteBuffer price;
  private int quantityTypeID;
  private java.time.Instant lastUpdate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PlansServicesPrices() {}

  /**
   * All-args constructor.
   * @param planID The new value for planID
   * @param serviceName The new value for serviceName
   * @param billingConditionID The new value for billingConditionID
   * @param price The new value for price
   * @param quantityTypeID The new value for quantityTypeID
   * @param lastUpdate The new value for lastUpdate
   */
  public PlansServicesPrices(java.lang.Integer planID, java.lang.CharSequence serviceName, java.lang.Integer billingConditionID, java.nio.ByteBuffer price, java.lang.Integer quantityTypeID, java.time.Instant lastUpdate) {
    this.planID = planID;
    this.serviceName = serviceName;
    this.billingConditionID = billingConditionID;
    this.price = price;
    this.quantityTypeID = quantityTypeID;
    this.lastUpdate = lastUpdate.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return planID;
    case 1: return serviceName;
    case 2: return billingConditionID;
    case 3: return price;
    case 4: return quantityTypeID;
    case 5: return lastUpdate;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.TimestampMillisConversion(),
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: planID = (java.lang.Integer)value$; break;
    case 1: serviceName = (java.lang.CharSequence)value$; break;
    case 2: billingConditionID = (java.lang.Integer)value$; break;
    case 3: price = (java.nio.ByteBuffer)value$; break;
    case 4: quantityTypeID = (java.lang.Integer)value$; break;
    case 5: lastUpdate = (java.time.Instant)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'planID' field.
   * @return The value of the 'planID' field.
   */
  public int getPlanID() {
    return planID;
  }


  /**
   * Sets the value of the 'planID' field.
   * @param value the value to set.
   */
  public void setPlanID(int value) {
    this.planID = value;
  }

  /**
   * Gets the value of the 'serviceName' field.
   * @return The value of the 'serviceName' field.
   */
  public java.lang.CharSequence getServiceName() {
    return serviceName;
  }


  /**
   * Sets the value of the 'serviceName' field.
   * @param value the value to set.
   */
  public void setServiceName(java.lang.CharSequence value) {
    this.serviceName = value;
  }

  /**
   * Gets the value of the 'billingConditionID' field.
   * @return The value of the 'billingConditionID' field.
   */
  public int getBillingConditionID() {
    return billingConditionID;
  }


  /**
   * Sets the value of the 'billingConditionID' field.
   * @param value the value to set.
   */
  public void setBillingConditionID(int value) {
    this.billingConditionID = value;
  }

  /**
   * Gets the value of the 'price' field.
   * @return The value of the 'price' field.
   */
  public java.nio.ByteBuffer getPrice() {
    return price;
  }


  /**
   * Sets the value of the 'price' field.
   * @param value the value to set.
   */
  public void setPrice(java.nio.ByteBuffer value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'quantityTypeID' field.
   * @return The value of the 'quantityTypeID' field.
   */
  public int getQuantityTypeID() {
    return quantityTypeID;
  }


  /**
   * Sets the value of the 'quantityTypeID' field.
   * @param value the value to set.
   */
  public void setQuantityTypeID(int value) {
    this.quantityTypeID = value;
  }

  /**
   * Gets the value of the 'lastUpdate' field.
   * @return The value of the 'lastUpdate' field.
   */
  public java.time.Instant getLastUpdate() {
    return lastUpdate;
  }


  /**
   * Sets the value of the 'lastUpdate' field.
   * @param value the value to set.
   */
  public void setLastUpdate(java.time.Instant value) {
    this.lastUpdate = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
  }

  /**
   * Creates a new PlansServicesPrices RecordBuilder.
   * @return A new PlansServicesPrices RecordBuilder
   */
  public static com.cdr.PlansServicesPrices.Builder newBuilder() {
    return new com.cdr.PlansServicesPrices.Builder();
  }

  /**
   * Creates a new PlansServicesPrices RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PlansServicesPrices RecordBuilder
   */
  public static com.cdr.PlansServicesPrices.Builder newBuilder(com.cdr.PlansServicesPrices.Builder other) {
    if (other == null) {
      return new com.cdr.PlansServicesPrices.Builder();
    } else {
      return new com.cdr.PlansServicesPrices.Builder(other);
    }
  }

  /**
   * Creates a new PlansServicesPrices RecordBuilder by copying an existing PlansServicesPrices instance.
   * @param other The existing instance to copy.
   * @return A new PlansServicesPrices RecordBuilder
   */
  public static com.cdr.PlansServicesPrices.Builder newBuilder(com.cdr.PlansServicesPrices other) {
    if (other == null) {
      return new com.cdr.PlansServicesPrices.Builder();
    } else {
      return new com.cdr.PlansServicesPrices.Builder(other);
    }
  }

  /**
   * RecordBuilder for PlansServicesPrices instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PlansServicesPrices>
    implements org.apache.avro.data.RecordBuilder<PlansServicesPrices> {

    private int planID;
    private java.lang.CharSequence serviceName;
    private int billingConditionID;
    private java.nio.ByteBuffer price;
    private int quantityTypeID;
    private java.time.Instant lastUpdate;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.cdr.PlansServicesPrices.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.planID)) {
        this.planID = data().deepCopy(fields()[0].schema(), other.planID);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.serviceName)) {
        this.serviceName = data().deepCopy(fields()[1].schema(), other.serviceName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.billingConditionID)) {
        this.billingConditionID = data().deepCopy(fields()[2].schema(), other.billingConditionID);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.price)) {
        this.price = data().deepCopy(fields()[3].schema(), other.price);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.quantityTypeID)) {
        this.quantityTypeID = data().deepCopy(fields()[4].schema(), other.quantityTypeID);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.lastUpdate)) {
        this.lastUpdate = data().deepCopy(fields()[5].schema(), other.lastUpdate);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing PlansServicesPrices instance
     * @param other The existing instance to copy.
     */
    private Builder(com.cdr.PlansServicesPrices other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.planID)) {
        this.planID = data().deepCopy(fields()[0].schema(), other.planID);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.serviceName)) {
        this.serviceName = data().deepCopy(fields()[1].schema(), other.serviceName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.billingConditionID)) {
        this.billingConditionID = data().deepCopy(fields()[2].schema(), other.billingConditionID);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.price)) {
        this.price = data().deepCopy(fields()[3].schema(), other.price);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.quantityTypeID)) {
        this.quantityTypeID = data().deepCopy(fields()[4].schema(), other.quantityTypeID);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.lastUpdate)) {
        this.lastUpdate = data().deepCopy(fields()[5].schema(), other.lastUpdate);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'planID' field.
      * @return The value.
      */
    public int getPlanID() {
      return planID;
    }


    /**
      * Sets the value of the 'planID' field.
      * @param value The value of 'planID'.
      * @return This builder.
      */
    public com.cdr.PlansServicesPrices.Builder setPlanID(int value) {
      validate(fields()[0], value);
      this.planID = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'planID' field has been set.
      * @return True if the 'planID' field has been set, false otherwise.
      */
    public boolean hasPlanID() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'planID' field.
      * @return This builder.
      */
    public com.cdr.PlansServicesPrices.Builder clearPlanID() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'serviceName' field.
      * @return The value.
      */
    public java.lang.CharSequence getServiceName() {
      return serviceName;
    }


    /**
      * Sets the value of the 'serviceName' field.
      * @param value The value of 'serviceName'.
      * @return This builder.
      */
    public com.cdr.PlansServicesPrices.Builder setServiceName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.serviceName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'serviceName' field has been set.
      * @return True if the 'serviceName' field has been set, false otherwise.
      */
    public boolean hasServiceName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'serviceName' field.
      * @return This builder.
      */
    public com.cdr.PlansServicesPrices.Builder clearServiceName() {
      serviceName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'billingConditionID' field.
      * @return The value.
      */
    public int getBillingConditionID() {
      return billingConditionID;
    }


    /**
      * Sets the value of the 'billingConditionID' field.
      * @param value The value of 'billingConditionID'.
      * @return This builder.
      */
    public com.cdr.PlansServicesPrices.Builder setBillingConditionID(int value) {
      validate(fields()[2], value);
      this.billingConditionID = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'billingConditionID' field has been set.
      * @return True if the 'billingConditionID' field has been set, false otherwise.
      */
    public boolean hasBillingConditionID() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'billingConditionID' field.
      * @return This builder.
      */
    public com.cdr.PlansServicesPrices.Builder clearBillingConditionID() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getPrice() {
      return price;
    }


    /**
      * Sets the value of the 'price' field.
      * @param value The value of 'price'.
      * @return This builder.
      */
    public com.cdr.PlansServicesPrices.Builder setPrice(java.nio.ByteBuffer value) {
      validate(fields()[3], value);
      this.price = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'price' field.
      * @return This builder.
      */
    public com.cdr.PlansServicesPrices.Builder clearPrice() {
      price = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'quantityTypeID' field.
      * @return The value.
      */
    public int getQuantityTypeID() {
      return quantityTypeID;
    }


    /**
      * Sets the value of the 'quantityTypeID' field.
      * @param value The value of 'quantityTypeID'.
      * @return This builder.
      */
    public com.cdr.PlansServicesPrices.Builder setQuantityTypeID(int value) {
      validate(fields()[4], value);
      this.quantityTypeID = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'quantityTypeID' field has been set.
      * @return True if the 'quantityTypeID' field has been set, false otherwise.
      */
    public boolean hasQuantityTypeID() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'quantityTypeID' field.
      * @return This builder.
      */
    public com.cdr.PlansServicesPrices.Builder clearQuantityTypeID() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastUpdate' field.
      * @return The value.
      */
    public java.time.Instant getLastUpdate() {
      return lastUpdate;
    }


    /**
      * Sets the value of the 'lastUpdate' field.
      * @param value The value of 'lastUpdate'.
      * @return This builder.
      */
    public com.cdr.PlansServicesPrices.Builder setLastUpdate(java.time.Instant value) {
      validate(fields()[5], value);
      this.lastUpdate = value.truncatedTo(java.time.temporal.ChronoUnit.MILLIS);
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'lastUpdate' field has been set.
      * @return True if the 'lastUpdate' field has been set, false otherwise.
      */
    public boolean hasLastUpdate() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'lastUpdate' field.
      * @return This builder.
      */
    public com.cdr.PlansServicesPrices.Builder clearLastUpdate() {
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PlansServicesPrices build() {
      try {
        PlansServicesPrices record = new PlansServicesPrices();
        record.planID = fieldSetFlags()[0] ? this.planID : (java.lang.Integer) defaultValue(fields()[0]);
        record.serviceName = fieldSetFlags()[1] ? this.serviceName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.billingConditionID = fieldSetFlags()[2] ? this.billingConditionID : (java.lang.Integer) defaultValue(fields()[2]);
        record.price = fieldSetFlags()[3] ? this.price : (java.nio.ByteBuffer) defaultValue(fields()[3]);
        record.quantityTypeID = fieldSetFlags()[4] ? this.quantityTypeID : (java.lang.Integer) defaultValue(fields()[4]);
        record.lastUpdate = fieldSetFlags()[5] ? this.lastUpdate : (java.time.Instant) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PlansServicesPrices>
    WRITER$ = (org.apache.avro.io.DatumWriter<PlansServicesPrices>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PlansServicesPrices>
    READER$ = (org.apache.avro.io.DatumReader<PlansServicesPrices>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










