/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.cdr;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class CurrentQuantityBalance extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1883083324028110666L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CurrentQuantityBalance\",\"namespace\":\"com.cdr\",\"fields\":[{\"name\":\"MSISDN\",\"type\":\"string\"},{\"name\":\"quantityTypeID\",\"type\":\"int\"},{\"name\":\"currentBalance\",\"type\":\"string\"},{\"name\":\"expirationDate\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CurrentQuantityBalance> ENCODER =
      new BinaryMessageEncoder<CurrentQuantityBalance>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CurrentQuantityBalance> DECODER =
      new BinaryMessageDecoder<CurrentQuantityBalance>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<CurrentQuantityBalance> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<CurrentQuantityBalance> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<CurrentQuantityBalance> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<CurrentQuantityBalance>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this CurrentQuantityBalance to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a CurrentQuantityBalance from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a CurrentQuantityBalance instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static CurrentQuantityBalance fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence MSISDN;
  private int quantityTypeID;
  private java.lang.CharSequence currentBalance;
  private java.lang.CharSequence expirationDate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CurrentQuantityBalance() {}

  /**
   * All-args constructor.
   * @param MSISDN The new value for MSISDN
   * @param quantityTypeID The new value for quantityTypeID
   * @param currentBalance The new value for currentBalance
   * @param expirationDate The new value for expirationDate
   */
  public CurrentQuantityBalance(java.lang.CharSequence MSISDN, java.lang.Integer quantityTypeID, java.lang.CharSequence currentBalance, java.lang.CharSequence expirationDate) {
    this.MSISDN = MSISDN;
    this.quantityTypeID = quantityTypeID;
    this.currentBalance = currentBalance;
    this.expirationDate = expirationDate;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return MSISDN;
    case 1: return quantityTypeID;
    case 2: return currentBalance;
    case 3: return expirationDate;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: MSISDN = (java.lang.CharSequence)value$; break;
    case 1: quantityTypeID = (java.lang.Integer)value$; break;
    case 2: currentBalance = (java.lang.CharSequence)value$; break;
    case 3: expirationDate = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'MSISDN' field.
   * @return The value of the 'MSISDN' field.
   */
  public java.lang.CharSequence getMSISDN() {
    return MSISDN;
  }


  /**
   * Sets the value of the 'MSISDN' field.
   * @param value the value to set.
   */
  public void setMSISDN(java.lang.CharSequence value) {
    this.MSISDN = value;
  }

  /**
   * Gets the value of the 'quantityTypeID' field.
   * @return The value of the 'quantityTypeID' field.
   */
  public int getQuantityTypeID() {
    return quantityTypeID;
  }


  /**
   * Sets the value of the 'quantityTypeID' field.
   * @param value the value to set.
   */
  public void setQuantityTypeID(int value) {
    this.quantityTypeID = value;
  }

  /**
   * Gets the value of the 'currentBalance' field.
   * @return The value of the 'currentBalance' field.
   */
  public java.lang.CharSequence getCurrentBalance() {
    return currentBalance;
  }


  /**
   * Sets the value of the 'currentBalance' field.
   * @param value the value to set.
   */
  public void setCurrentBalance(java.lang.CharSequence value) {
    this.currentBalance = value;
  }

  /**
   * Gets the value of the 'expirationDate' field.
   * @return The value of the 'expirationDate' field.
   */
  public java.lang.CharSequence getExpirationDate() {
    return expirationDate;
  }


  /**
   * Sets the value of the 'expirationDate' field.
   * @param value the value to set.
   */
  public void setExpirationDate(java.lang.CharSequence value) {
    this.expirationDate = value;
  }

  /**
   * Creates a new CurrentQuantityBalance RecordBuilder.
   * @return A new CurrentQuantityBalance RecordBuilder
   */
  public static com.cdr.CurrentQuantityBalance.Builder newBuilder() {
    return new com.cdr.CurrentQuantityBalance.Builder();
  }

  /**
   * Creates a new CurrentQuantityBalance RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CurrentQuantityBalance RecordBuilder
   */
  public static com.cdr.CurrentQuantityBalance.Builder newBuilder(com.cdr.CurrentQuantityBalance.Builder other) {
    if (other == null) {
      return new com.cdr.CurrentQuantityBalance.Builder();
    } else {
      return new com.cdr.CurrentQuantityBalance.Builder(other);
    }
  }

  /**
   * Creates a new CurrentQuantityBalance RecordBuilder by copying an existing CurrentQuantityBalance instance.
   * @param other The existing instance to copy.
   * @return A new CurrentQuantityBalance RecordBuilder
   */
  public static com.cdr.CurrentQuantityBalance.Builder newBuilder(com.cdr.CurrentQuantityBalance other) {
    if (other == null) {
      return new com.cdr.CurrentQuantityBalance.Builder();
    } else {
      return new com.cdr.CurrentQuantityBalance.Builder(other);
    }
  }

  /**
   * RecordBuilder for CurrentQuantityBalance instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CurrentQuantityBalance>
    implements org.apache.avro.data.RecordBuilder<CurrentQuantityBalance> {

    private java.lang.CharSequence MSISDN;
    private int quantityTypeID;
    private java.lang.CharSequence currentBalance;
    private java.lang.CharSequence expirationDate;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.cdr.CurrentQuantityBalance.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.MSISDN)) {
        this.MSISDN = data().deepCopy(fields()[0].schema(), other.MSISDN);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.quantityTypeID)) {
        this.quantityTypeID = data().deepCopy(fields()[1].schema(), other.quantityTypeID);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.currentBalance)) {
        this.currentBalance = data().deepCopy(fields()[2].schema(), other.currentBalance);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.expirationDate)) {
        this.expirationDate = data().deepCopy(fields()[3].schema(), other.expirationDate);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing CurrentQuantityBalance instance
     * @param other The existing instance to copy.
     */
    private Builder(com.cdr.CurrentQuantityBalance other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.MSISDN)) {
        this.MSISDN = data().deepCopy(fields()[0].schema(), other.MSISDN);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.quantityTypeID)) {
        this.quantityTypeID = data().deepCopy(fields()[1].schema(), other.quantityTypeID);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.currentBalance)) {
        this.currentBalance = data().deepCopy(fields()[2].schema(), other.currentBalance);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.expirationDate)) {
        this.expirationDate = data().deepCopy(fields()[3].schema(), other.expirationDate);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'MSISDN' field.
      * @return The value.
      */
    public java.lang.CharSequence getMSISDN() {
      return MSISDN;
    }


    /**
      * Sets the value of the 'MSISDN' field.
      * @param value The value of 'MSISDN'.
      * @return This builder.
      */
    public com.cdr.CurrentQuantityBalance.Builder setMSISDN(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.MSISDN = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'MSISDN' field has been set.
      * @return True if the 'MSISDN' field has been set, false otherwise.
      */
    public boolean hasMSISDN() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'MSISDN' field.
      * @return This builder.
      */
    public com.cdr.CurrentQuantityBalance.Builder clearMSISDN() {
      MSISDN = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'quantityTypeID' field.
      * @return The value.
      */
    public int getQuantityTypeID() {
      return quantityTypeID;
    }


    /**
      * Sets the value of the 'quantityTypeID' field.
      * @param value The value of 'quantityTypeID'.
      * @return This builder.
      */
    public com.cdr.CurrentQuantityBalance.Builder setQuantityTypeID(int value) {
      validate(fields()[1], value);
      this.quantityTypeID = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'quantityTypeID' field has been set.
      * @return True if the 'quantityTypeID' field has been set, false otherwise.
      */
    public boolean hasQuantityTypeID() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'quantityTypeID' field.
      * @return This builder.
      */
    public com.cdr.CurrentQuantityBalance.Builder clearQuantityTypeID() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'currentBalance' field.
      * @return The value.
      */
    public java.lang.CharSequence getCurrentBalance() {
      return currentBalance;
    }


    /**
      * Sets the value of the 'currentBalance' field.
      * @param value The value of 'currentBalance'.
      * @return This builder.
      */
    public com.cdr.CurrentQuantityBalance.Builder setCurrentBalance(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.currentBalance = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'currentBalance' field has been set.
      * @return True if the 'currentBalance' field has been set, false otherwise.
      */
    public boolean hasCurrentBalance() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'currentBalance' field.
      * @return This builder.
      */
    public com.cdr.CurrentQuantityBalance.Builder clearCurrentBalance() {
      currentBalance = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'expirationDate' field.
      * @return The value.
      */
    public java.lang.CharSequence getExpirationDate() {
      return expirationDate;
    }


    /**
      * Sets the value of the 'expirationDate' field.
      * @param value The value of 'expirationDate'.
      * @return This builder.
      */
    public com.cdr.CurrentQuantityBalance.Builder setExpirationDate(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.expirationDate = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'expirationDate' field has been set.
      * @return True if the 'expirationDate' field has been set, false otherwise.
      */
    public boolean hasExpirationDate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'expirationDate' field.
      * @return This builder.
      */
    public com.cdr.CurrentQuantityBalance.Builder clearExpirationDate() {
      expirationDate = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CurrentQuantityBalance build() {
      try {
        CurrentQuantityBalance record = new CurrentQuantityBalance();
        record.MSISDN = fieldSetFlags()[0] ? this.MSISDN : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.quantityTypeID = fieldSetFlags()[1] ? this.quantityTypeID : (java.lang.Integer) defaultValue(fields()[1]);
        record.currentBalance = fieldSetFlags()[2] ? this.currentBalance : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.expirationDate = fieldSetFlags()[3] ? this.expirationDate : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CurrentQuantityBalance>
    WRITER$ = (org.apache.avro.io.DatumWriter<CurrentQuantityBalance>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CurrentQuantityBalance>
    READER$ = (org.apache.avro.io.DatumReader<CurrentQuantityBalance>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.MSISDN);

    out.writeInt(this.quantityTypeID);

    out.writeString(this.currentBalance);

    out.writeString(this.expirationDate);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.MSISDN = in.readString(this.MSISDN instanceof Utf8 ? (Utf8)this.MSISDN : null);

      this.quantityTypeID = in.readInt();

      this.currentBalance = in.readString(this.currentBalance instanceof Utf8 ? (Utf8)this.currentBalance : null);

      this.expirationDate = in.readString(this.expirationDate instanceof Utf8 ? (Utf8)this.expirationDate : null);

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.MSISDN = in.readString(this.MSISDN instanceof Utf8 ? (Utf8)this.MSISDN : null);
          break;

        case 1:
          this.quantityTypeID = in.readInt();
          break;

        case 2:
          this.currentBalance = in.readString(this.currentBalance instanceof Utf8 ? (Utf8)this.currentBalance : null);
          break;

        case 3:
          this.expirationDate = in.readString(this.expirationDate instanceof Utf8 ? (Utf8)this.expirationDate : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










